{"version":3,"sources":["../../routes/users.js"],"names":["express","require","router","Router","db","mongoose","users","model","crypto","get","req","res","next","session","username","show_message","message","find_all_users","find","all_users","render","title","console","log","redirect","params","remove_user","remove","exec","delete_user","post","body","password","add_user","findOne","user","hash","createHash","update","digest","updated_at","Date","now","save","module","exports"],"mappings":"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","file":"users.js","sourcesContent":["const express = require('express');\nconst router = express.Router();\n\nconst db = require('../db/users');\nconst mongoose = require('mongoose');\nconst users = mongoose.model('users');\n\nconst crypto = require('crypto');\n\nrouter.get('/', function (req, res, next) {\n    if (req.session.username) {\n        let show_message = false,\n            message = \"\";\n        switch (req.session.message) {\n            case \"delete\":\n                show_message = true;\n                message = \"User is deleted\";\n                break;\n            case \"create\":\n                show_message = true;\n                message = \"User is created\";\n                break;\n            case \"exist\":\n                show_message = true;\n                message = \"User already exist\";\n                break;\n        }\n        const find_all_users = async () => {\n            try {\n                const all_users = await users.find();\n                res.render('users', {\n                    title: 'Users',\n                    show_message: show_message,\n                    message: message,\n                    username: req.session.username,\n                    users: all_users\n                });\n            } catch (err) {\n                return err;\n            }\n        };\n        console.log(find_all_users());\n        req.session.message = null;\n    } else res.redirect('/login')\n});\n\nrouter.get('/message/:message', function (req, res, next) {\n    if (req.session.username) {\n        req.session.message = req.params.message;\n        res.redirect(\"/users\");\n    } else res.redirect('/login')\n});\n\nrouter.get('/:action/:username', function (req, res, next) {\n    if (req.session.username) {\n        const remove_user = async (username) => {\n            try {\n                const delete_user = await users.find({username: username}).remove().exec();\n                req.session.message = \"delete\";\n                res.redirect(\"/users\");\n            } catch (err) {\n                return err\n            }\n        };\n        console.log(remove_user(req.params.username));\n    } else res.redirect('/login')\n});\n\nrouter.post('/', function (req, res, next) {\n    if (req.session.username && req.body.username && req.body.password) {\n        const add_user = async (username, password) => {\n            try {\n                const user = await users.findOne({username: req.body.username});\n                if (user) {\n                    res.redirect('/users/message/exist');\n                } else {\n                    const hash = crypto.createHash('sha256').update(req.body.password).digest('base64');\n                    await new users({\n                        username: req.body.username,\n                        password: hash,\n                        updated_at: Date.now()\n                    }).save();\n                    res.redirect('/users/message/create');\n                }\n            }\n            catch (err) {\n                return err\n            }\n        };\n        console.log(add_user(req.body.username, req.body.password));\n    } else res.redirect('/login')\n});\n\nmodule.exports = router;\n"]}