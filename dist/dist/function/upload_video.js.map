{"version":3,"sources":["../../function/upload_video.js"],"names":["db","require","mongoose","videos","model","fileUpload","path","fs","exports","upload","video","ext","extname","name","basename","slice","length","file_name","file_type","save","err","new_video","count","id","mkdir","mv","buff","Buffer","open","fd","read","bytesRead","buffer","start","indexOf","timeScale","readUInt32BE","duration","movieLength","Math","floor","update","_id","console","log","res","status","send"],"mappings":"AAAA;;AAEA,IAAIA,KAAKC,QAAQ,cAAR,CAAT;;AAEA,IAAIC,WAAWD,QAAQ,UAAR,CAAf;AACA,IAAIE,SAASD,SAASE,KAAT,CAAe,QAAf,CAAb;;AAEA,IAAIC,aAAaJ,QAAQ,oBAAR,CAAjB;AACA,IAAIK,OAAOL,QAAQ,MAAR,CAAX;AACA,IAAIM,KAAKN,QAAQ,IAAR,CAAT;;AAEAO,QAAQC,MAAR,GAAiB,SAASA,MAAT,CAAgBC,KAAhB,EAAuB;AACpC,QAAIC,MAAML,KAAKM,OAAL,CAAaF,MAAMG,IAAnB,CAAV;AACA,QAAIA,OAAOP,KAAKQ,QAAL,CAAcJ,MAAMG,IAApB,EAA0BE,KAA1B,CAAgC,CAAhC,EAAmC,IAAIJ,IAAIK,MAA3C,CAAX;AACA,YAAQL,GAAR;AACI,aAAK,MAAL;AACA,aAAK,MAAL;AACI,gBAAIR,MAAJ,CAAW;AACPc,2BAAWJ,IADJ;AAEPK,2BAAWP;AAFJ,aAAX,EAGGQ,IAHH,CAGQ,UAAUC,GAAV,EAAeC,SAAf,EAA0BC,KAA1B,EAAiC;AACrC,oBAAIC,KAAKF,UAAUE,EAAnB;AACA,oBAAIjB,OAAO,YAAYiB,EAAvB;AACAhB,mBAAGiB,KAAH,CAASlB,IAAT,EAAe,UAAUc,GAAV,EAAe;AAC1BV,0BAAMe,EAAN,CAASnB,OAAO,GAAP,GAAaiB,EAAb,GAAkB,WAAlB,GAAgCZ,GAAzC,EAA8C,UAAUS,GAAV,EAAe;AACzD,4BAAIM,OAAO,IAAIC,MAAJ,CAAW,GAAX,CAAX;AACApB,2BAAGqB,IAAH,CAAQtB,OAAO,GAAP,GAAae,UAAUE,EAAvB,GAA4B,WAA5B,GAA0CZ,GAAlD,EAAuD,GAAvD,EAA4D,UAAUS,GAAV,EAAeS,EAAf,EAAmB;AAC3EtB,+BAAGuB,IAAH,CAAQD,EAAR,EAAYH,IAAZ,EAAkB,CAAlB,EAAqB,GAArB,EAA0B,CAA1B,EAA6B,UAAUN,GAAV,EAAeW,SAAf,EAA0BC,MAA1B,EAAkC;AAC3D,oCAAIC,QAAQD,OAAOE,OAAP,CAAe,IAAIP,MAAJ,CAAW,MAAX,CAAf,IAAqC,EAAjD;AACA,oCAAIQ,YAAYH,OAAOI,YAAP,CAAoBH,KAApB,EAA2B,CAA3B,CAAhB;AACA,oCAAII,WAAWL,OAAOI,YAAP,CAAoBH,QAAQ,CAA5B,EAA+B,CAA/B,CAAf;AACA,oCAAIK,cAAcC,KAAKC,KAAL,CAAWH,WAAWF,SAAtB,CAAlB;AACAhC,uCAAOsC,MAAP,CAAc,EAAEC,KAAKnB,EAAP,EAAd,EAA2B;AACvBc,8CAAUC;AADa,iCAA3B,EAEG,UAAUlB,GAAV,EAAeC,SAAf,EAA0BC,KAA1B,EAAiC;AAChCqB,4CAAQC,GAAR,CAAY,iBAAiBT,SAA7B;AACAQ,4CAAQC,GAAR,CAAY,eAAeP,QAA3B;AACAM,4CAAQC,GAAR,CAAY,mBAAmBN,WAAnB,GAAiC,UAA7C;AACH,iCAND;AAOH,6BAZD;AAaH,yBAdD;AAeH,qBAjBD;AAkBH,iBAnBD;AAoBH,aA1BD;AA2BA;AACJ;AACI,mBAAOO,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB3B,GAArB,CAAP;AAhCR;AAkCH,CArCD;AAsCA","file":"upload_video.js","sourcesContent":["'use strict';\n\nvar db = require('../db/videos');\n\nvar mongoose = require('mongoose');\nvar videos = mongoose.model('videos');\n\nvar fileUpload = require('express-fileupload');\nvar path = require('path');\nvar fs = require('fs');\n\nexports.upload = function upload(video) {\n    var ext = path.extname(video.name);\n    var name = path.basename(video.name).slice(0, 0 - ext.length);\n    switch (ext) {\n        case \".mov\":\n        case \".mp4\":\n            new videos({\n                file_name: name,\n                file_type: ext\n            }).save(function (err, new_video, count) {\n                var id = new_video.id;\n                var path = 'upload/' + id;\n                fs.mkdir(path, function (err) {\n                    video.mv(path + '/' + id + '_original' + ext, function (err) {\n                        var buff = new Buffer(100);\n                        fs.open(path + '/' + new_video.id + '_original' + ext, 'r', function (err, fd) {\n                            fs.read(fd, buff, 0, 100, 0, function (err, bytesRead, buffer) {\n                                var start = buffer.indexOf(new Buffer('mvhd')) + 17;\n                                var timeScale = buffer.readUInt32BE(start, 4);\n                                var duration = buffer.readUInt32BE(start + 4, 4);\n                                var movieLength = Math.floor(duration / timeScale);\n                                videos.update({ _id: id }, {\n                                    duration: movieLength\n                                }, function (err, new_video, count) {\n                                    console.log('time scale: ' + timeScale);\n                                    console.log('duration: ' + duration);\n                                    console.log('movie length: ' + movieLength + ' seconds');\n                                });\n                            });\n                        });\n                    });\n                });\n            });\n            break;\n        default:\n            return res.status(500).send(err);\n    }\n};\n//# sourceMappingURL=upload_video.js.map"]}