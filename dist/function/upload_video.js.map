{"version":3,"sources":["../../function/upload_video.js"],"names":["mongoose","require","db_videos","model","videos","S3","fileUpload","path","fs","rimraf","Video","file","video","prototype","remove","callback","err","console","log","find","_id","exec","save","ext","extname","name","basename","slice","length","file_name","file_type","new_video","count","id","mkdir","mv","s3","res","status","send","module","exports"],"mappings":";;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,YAAYF,SAASG,KAAT,CAAe,QAAf,CAAlB;AACA,IAAMC,SAASJ,SAASG,KAAT,CAAe,QAAf,CAAf;;AAEA,IAAME,KAAKJ,QAAQ,gBAAR,CAAX;AACA,IAAMK,aAAaL,QAAQ,oBAAR,CAAnB;AACA,IAAMM,OAAON,QAAQ,MAAR,CAAb;AACA,IAAMO,KAAKP,QAAQ,IAAR,CAAX;AACA,IAAMQ,SAASR,QAAQ,QAAR,CAAf;;AAEA,SAASS,KAAT,CAAeC,IAAf,EAAqB;AACjB,SAAKC,KAAL,GAAaD,IAAb;AACH;;AAEDD,MAAMG,SAAN,CAAgBC,MAAhB,GAAyB,UAAUC,QAAV,EAAoB;AACzC,QAAIH,QAAQ,KAAKA,KAAjB;AACAH,WAAO,YAAYG,KAAnB,EAA0B,UAAUI,GAAV,EAAe;AACrC,YAAGA,GAAH,EAAO;AACHC,oBAAQC,GAAR,CAAYF,GAAZ;AACH,SAFD,MAEK;AACDZ,mBAAOe,IAAP,CAAY,EAACC,KAAKR,KAAN,EAAZ,EAA0BE,MAA1B,GAAmCO,IAAnC;AACAN;AACH;AACJ,KAPD;AAQH,CAVD;;AAYAL,MAAMG,SAAN,CAAgBS,IAAhB,GAAuB,YAAW;AAC9B,QAAIV,QAAQ,KAAKA,KAAjB;AACA,QAAIW,MAAMhB,KAAKiB,OAAL,CAAaZ,MAAMa,IAAnB,CAAV;AACA,QAAIA,OAAOlB,KAAKmB,QAAL,CAAcd,MAAMa,IAApB,EAA0BE,KAA1B,CAAgC,CAAhC,EAAmC,IAAIJ,IAAIK,MAA3C,CAAX;AACA,YAAQL,GAAR;AACI,aAAK,MAAL;AACA,aAAK,MAAL;AACI,gBAAInB,MAAJ,CAAW;AACPyB,2BAAWJ,IADJ;AAEPK,2BAAWP;AAFJ,aAAX,EAGGD,IAHH,CAGQ,UAAUN,GAAV,EAAee,SAAf,EAA0BC,KAA1B,EAAiC;AACrC,oBAAIC,KAAKF,UAAUE,EAAnB;AACA,oBAAI1B,OAAO,YAAY0B,EAAvB;AACAzB,mBAAG0B,KAAH,CAAS3B,IAAT,EAAe,UAAUS,GAAV,EAAe;AAC1BJ,0BAAMuB,EAAN,CAAS5B,OAAO,GAAP,GAAa0B,EAAb,GAAkB,WAAlB,GAAgCV,GAAzC,EAA8C,UAAUP,GAAV,EAAe;AACzD,4BAAIoB,KAAK,IAAI/B,EAAJ,CAAO,uBAAP,EAA+B4B,KAAGV,GAAlC,EAAsCX,KAAtC,CAAT;AACAwB,2BAAGd,IAAH;AACH,qBAHD;AAIH,iBALD;AAMH,aAZD;AAaA;AACJ;AACI,mBAAOe,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBvB,GAArB,CAAP;AAlBR;AAoBH,CAxBD;;AA0BAwB,OAAOC,OAAP,GAAiB/B,KAAjB","file":"upload_video.js","sourcesContent":["const mongoose = require('mongoose');\r\nconst db_videos = mongoose.model('videos');\r\nconst videos = mongoose.model('videos');\r\n\r\nconst S3 = require('./upload_to_S3');\r\nconst fileUpload = require('express-fileupload');\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst rimraf = require('rimraf');\r\n\r\nfunction Video(file) {\r\n    this.video = file;\r\n}\r\n\r\nVideo.prototype.remove = function (callback) {\r\n    let video = this.video;\r\n    rimraf('upload/' + video, function (err) {\r\n        if(err){\r\n            console.log(err);\r\n        }else{\r\n            videos.find({_id: video}).remove().exec();\r\n            callback();\r\n        }\r\n    });\r\n};\r\n\r\nVideo.prototype.save = function() {\r\n    let video = this.video;\r\n    let ext = path.extname(video.name);\r\n    let name = path.basename(video.name).slice(0, 0 - ext.length);\r\n    switch (ext) {\r\n        case \".mov\":\r\n        case \".mp4\":\r\n            new videos({\r\n                file_name: name,\r\n                file_type: ext\r\n            }).save(function (err, new_video, count) {\r\n                let id = new_video.id;\r\n                let path = 'upload/' + id;\r\n                fs.mkdir(path, function (err) {\r\n                    video.mv(path + '/' + id + '_original' + ext, function (err) {\r\n                        let s3 = new S3(\"fyp-videoinout-bucket\",id+ext,video);\r\n                        s3.save();\r\n                    });\r\n                });\r\n            });\r\n            break;\r\n        default:\r\n            return res.status(500).send(err);\r\n    }\r\n};\r\n\r\nmodule.exports = Video;"]}