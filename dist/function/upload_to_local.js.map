{"version":3,"sources":["../../function/upload_to_local.js"],"names":["mongoose","require","db_videos","model","videos","S3","fileUpload","path","fs","rimraf","exports","remove","callback","video","err","console","log","find","_id","exec","upload","upload_video","res","ext","extname","name","basename","slice","length","file_name","file_type","save","id","mkdir","mv","status","send"],"mappings":";;;;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,YAAYF,SAASG,KAAT,CAAe,QAAf,CAAlB;AACA,IAAMC,SAASJ,SAASG,KAAT,CAAe,QAAf,CAAf;;AAEA,IAAME,KAAKJ,QAAQ,gBAAR,CAAX;AACA,IAAMK,aAAaL,QAAQ,oBAAR,CAAnB;AACA,IAAMM,OAAON,QAAQ,MAAR,CAAb;AACA,IAAMO,KAAKP,QAAQ,IAAR,CAAX;AACA,IAAMQ,SAASR,QAAQ,QAAR,CAAf;;AAEAS,QAAQC,MAAR;AAAA,uEAAiB,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACTC,6BADS,GACD,UAAKA,KADJ;;AAEbJ,+BAAO,YAAYI,KAAnB,EAA0B,UAAUC,GAAV,EAAe;AACrC,gCAAIA,GAAJ,EAAS;AACLC,wCAAQC,GAAR,CAAYF,GAAZ;AACH,6BAFD,MAEO;AACHV,uCAAOa,IAAP,CAAY,EAACC,KAAKL,KAAN,EAAZ,EAA0BF,MAA1B,GAAmCQ,IAAnC;AACAP;AACH;AACJ,yBAPD;;AAFa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAAA;AAAA;AAAA;AAAA;;AAYAF,QAAQU,MAAR;AAAA,wEAAiB,kBAAOC,YAAP,EAAqBC,GAArB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACTC,2BADS,GACHhB,KAAKiB,OAAL,CAAaH,aAAaI,IAA1B,CADG;AAETA,4BAFS,GAEFlB,KAAKmB,QAAL,CAAcL,aAAaI,IAA3B,EAAiCE,KAAjC,CAAuC,CAAvC,EAA0C,IAAIJ,IAAIK,MAAlD,CAFE;AAAA,uCAGLL,GAHK;AAAA,0DAIJ,MAJI,wBAKJ,MALI;AAAA;;AAAA;AAAA;AAAA;AAAA,+BAOmBnB,OAAO;AACvByB,uCAAWJ,IADY;AAEvBK,uCAAWP;AAFY,yBAAP,EAGjBQ,IAHiB,EAPnB;;AAAA;AAOKlB,6BAPL;AAWKmB,0BAXL,GAWUnB,MAAMmB,EAXhB;AAYKzB,6BAZL,GAYY,YAAYyB,EAZxB;AAAA;AAAA,+BAaKxB,GAAGyB,KAAH,CAAS1B,KAAT,CAbL;;AAAA;AAAA;AAAA,+BAcKc,aAAaa,EAAb,CAAgB3B,QAAO,GAAP,GAAayB,EAAb,GAAkB,WAAlB,GAAgCT,GAAhD,CAdL;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,0DAsBED,IAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBtB,GAArB,CAtBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAAA;AAAA;AAAA;AAAA","file":"upload_to_local.js","sourcesContent":["const mongoose = require('mongoose');\r\nconst db_videos = mongoose.model('videos');\r\nconst videos = mongoose.model('videos');\r\n\r\nconst S3 = require('./upload_to_S3');\r\nconst fileUpload = require('express-fileupload');\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst rimraf = require('rimraf');\r\n\r\nexports.remove = async (callback) => {\r\n    let video = this.video;\r\n    rimraf('upload/' + video, function (err) {\r\n        if (err) {\r\n            console.log(err);\r\n        } else {\r\n            videos.find({_id: video}).remove().exec();\r\n            callback();\r\n        }\r\n    });\r\n};\r\n\r\nexports.upload = async (upload_video, res) => {\r\n    let ext = path.extname(upload_video.name);\r\n    let name = path.basename(upload_video.name).slice(0, 0 - ext.length);\r\n    switch (ext) {\r\n        case \".mov\":\r\n        case \".mp4\":\r\n            try {\r\n                const video = await videos({\r\n                    file_name: name,\r\n                    file_type: ext\r\n                }).save();\r\n                const id = video.id;\r\n                const path = 'upload/' + id;\r\n                await fs.mkdir(path);\r\n                await upload_video.mv(path + '/' + id + '_original' + ext);\r\n                // let s3 = new S3(\"fyp-videoinout-bucket\", id + ext, video);\r\n                // s3.save();\r\n            } catch (err) {\r\n                return err\r\n            }\r\n            break;\r\n        default:\r\n            return res.status(500).send(err);\r\n    }\r\n};"]}